/*
 * This file is generated by jOOQ.
 */
package com.uptosmth.chronos.db.tables;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.uptosmth.chronos.db.DefaultSchema;
import com.uptosmth.chronos.db.Keys;
import com.uptosmth.chronos.db.tables.records.HeartbeatRecord;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Heartbeat extends TableImpl<HeartbeatRecord> {

    private static final long serialVersionUID = 1L;

    /** The reference instance of <code>heartbeat</code> */
    public static final Heartbeat HEARTBEAT = new Heartbeat();

    /** The class holding records for this type */
    @Override
    public Class<HeartbeatRecord> getRecordType() {
        return HeartbeatRecord.class;
    }

    /** The column <code>heartbeat.id</code>. */
    public final TableField<HeartbeatRecord, Integer> ID =
            createField(
                    DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /** The column <code>heartbeat.uuid</code>. */
    public final TableField<HeartbeatRecord, String> UUID =
            createField(DSL.name("uuid"), SQLDataType.CLOB.nullable(false), this, "");

    /** The column <code>heartbeat.delivered_at</code>. */
    public final TableField<HeartbeatRecord, LocalDateTime> DELIVERED_AT =
            createField(
                    DSL.name("delivered_at"),
                    SQLDataType.LOCALDATETIME(0).nullable(false),
                    this,
                    "");

    /** The column <code>heartbeat.processed_at</code>. */
    public final TableField<HeartbeatRecord, LocalDateTime> PROCESSED_AT =
            createField(DSL.name("processed_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /** The column <code>heartbeat.created_at</code>. */
    public final TableField<HeartbeatRecord, LocalDateTime> CREATED_AT =
            createField(
                    DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /** The column <code>heartbeat.local_created_at</code>. */
    public final TableField<HeartbeatRecord, LocalDateTime> LOCAL_CREATED_AT =
            createField(DSL.name("local_created_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /** The column <code>heartbeat.type</code>. */
    public final TableField<HeartbeatRecord, String> TYPE =
            createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "");

    /** The column <code>heartbeat.data</code>. */
    public final TableField<HeartbeatRecord, String> DATA =
            createField(DSL.name("data"), SQLDataType.CLOB.nullable(false), this, "");

    private Heartbeat(Name alias, Table<HeartbeatRecord> aliased) {
        this(alias, aliased, null);
    }

    private Heartbeat(Name alias, Table<HeartbeatRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /** Create an aliased <code>heartbeat</code> table reference */
    public Heartbeat(String alias) {
        this(DSL.name(alias), HEARTBEAT);
    }

    /** Create an aliased <code>heartbeat</code> table reference */
    public Heartbeat(Name alias) {
        this(alias, HEARTBEAT);
    }

    /** Create a <code>heartbeat</code> table reference */
    public Heartbeat() {
        this(DSL.name("heartbeat"), null);
    }

    public <O extends Record> Heartbeat(Table<O> child, ForeignKey<O, HeartbeatRecord> key) {
        super(child, key, HEARTBEAT);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<HeartbeatRecord, Integer> getIdentity() {
        return (Identity<HeartbeatRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<HeartbeatRecord> getPrimaryKey() {
        return Keys.PK_HEARTBEAT;
    }

    @Override
    public List<UniqueKey<HeartbeatRecord>> getKeys() {
        return Arrays.<UniqueKey<HeartbeatRecord>>asList(Keys.PK_HEARTBEAT);
    }

    @Override
    public Heartbeat as(String alias) {
        return new Heartbeat(DSL.name(alias), this);
    }

    @Override
    public Heartbeat as(Name alias) {
        return new Heartbeat(alias, this);
    }

    /** Rename this table */
    @Override
    public Heartbeat rename(String name) {
        return new Heartbeat(DSL.name(name), null);
    }

    /** Rename this table */
    @Override
    public Heartbeat rename(Name name) {
        return new Heartbeat(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<
                    Integer,
                    String,
                    LocalDateTime,
                    LocalDateTime,
                    LocalDateTime,
                    LocalDateTime,
                    String,
                    String>
            fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
