/*
 * This file is generated by jOOQ.
 */
package com.uptosmth.chronos.db.tables;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.uptosmth.chronos.db.DefaultSchema;
import com.uptosmth.chronos.db.Keys;
import com.uptosmth.chronos.db.tables.records.ActivityRecord;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Activity extends TableImpl<ActivityRecord> {

    private static final long serialVersionUID = 1L;

    /** The reference instance of <code>activity</code> */
    public static final Activity ACTIVITY = new Activity();

    /** The class holding records for this type */
    @Override
    public Class<ActivityRecord> getRecordType() {
        return ActivityRecord.class;
    }

    /** The column <code>activity.id</code>. */
    public final TableField<ActivityRecord, Integer> ID =
            createField(
                    DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /** The column <code>activity.uuid</code>. */
    public final TableField<ActivityRecord, String> UUID =
            createField(DSL.name("uuid"), SQLDataType.CLOB.nullable(false), this, "");

    /** The column <code>activity.type</code>. */
    public final TableField<ActivityRecord, String> TYPE =
            createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "");

    /** The column <code>activity.created_at</code>. */
    public final TableField<ActivityRecord, LocalDateTime> CREATED_AT =
            createField(
                    DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /** The column <code>activity.started_at</code>. */
    public final TableField<ActivityRecord, LocalDateTime> STARTED_AT =
            createField(
                    DSL.name("started_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /** The column <code>activity.finished_at</code>. */
    public final TableField<ActivityRecord, LocalDateTime> FINISHED_AT =
            createField(DSL.name("finished_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /** The column <code>activity.local_started_at</code>. */
    public final TableField<ActivityRecord, LocalDateTime> LOCAL_STARTED_AT =
            createField(DSL.name("local_started_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /** The column <code>activity.local_finished_at</code>. */
    public final TableField<ActivityRecord, LocalDateTime> LOCAL_FINISHED_AT =
            createField(DSL.name("local_finished_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /** The column <code>activity.elapsed_milli</code>. */
    public final TableField<ActivityRecord, Long> ELAPSED_MILLI =
            createField(
                    DSL.name("elapsed_milli"),
                    SQLDataType.BIGINT
                            .nullable(false)
                            .defaultValue(DSL.field("0", SQLDataType.BIGINT)),
                    this,
                    "");

    private Activity(Name alias, Table<ActivityRecord> aliased) {
        this(alias, aliased, null);
    }

    private Activity(Name alias, Table<ActivityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /** Create an aliased <code>activity</code> table reference */
    public Activity(String alias) {
        this(DSL.name(alias), ACTIVITY);
    }

    /** Create an aliased <code>activity</code> table reference */
    public Activity(Name alias) {
        this(alias, ACTIVITY);
    }

    /** Create a <code>activity</code> table reference */
    public Activity() {
        this(DSL.name("activity"), null);
    }

    public <O extends Record> Activity(Table<O> child, ForeignKey<O, ActivityRecord> key) {
        super(child, key, ACTIVITY);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<ActivityRecord, Integer> getIdentity() {
        return (Identity<ActivityRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ActivityRecord> getPrimaryKey() {
        return Keys.PK_ACTIVITY;
    }

    @Override
    public List<UniqueKey<ActivityRecord>> getKeys() {
        return Arrays.<UniqueKey<ActivityRecord>>asList(
                Keys.PK_ACTIVITY, Keys.SQLITE_AUTOINDEX_ACTIVITY_1);
    }

    @Override
    public Activity as(String alias) {
        return new Activity(DSL.name(alias), this);
    }

    @Override
    public Activity as(Name alias) {
        return new Activity(alias, this);
    }

    /** Rename this table */
    @Override
    public Activity rename(String name) {
        return new Activity(DSL.name(name), null);
    }

    /** Rename this table */
    @Override
    public Activity rename(Name name) {
        return new Activity(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<
                    Integer,
                    String,
                    String,
                    LocalDateTime,
                    LocalDateTime,
                    LocalDateTime,
                    LocalDateTime,
                    LocalDateTime,
                    Long>
            fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
