/*
 * This file is generated by jOOQ.
 */
package com.uptosmth.chronos.db.tables;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.uptosmth.chronos.db.DefaultSchema;
import com.uptosmth.chronos.db.Keys;
import com.uptosmth.chronos.db.tables.records.WindowActivityRecord;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class WindowActivity extends TableImpl<WindowActivityRecord> {

    private static final long serialVersionUID = 1L;

    /** The reference instance of <code>window_activity</code> */
    public static final WindowActivity WINDOW_ACTIVITY = new WindowActivity();

    /** The class holding records for this type */
    @Override
    public Class<WindowActivityRecord> getRecordType() {
        return WindowActivityRecord.class;
    }

    /** The column <code>window_activity.id</code>. */
    public final TableField<WindowActivityRecord, Integer> ID =
            createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /** The column <code>window_activity.category</code>. */
    public final TableField<WindowActivityRecord, String> CATEGORY =
            createField(DSL.name("category"), SQLDataType.CLOB.nullable(false), this, "");

    /** The column <code>window_activity.application</code>. */
    public final TableField<WindowActivityRecord, String> APPLICATION =
            createField(DSL.name("application"), SQLDataType.CLOB.nullable(false), this, "");

    /** The column <code>window_activity.window_title</code>. */
    public final TableField<WindowActivityRecord, String> WINDOW_TITLE =
            createField(DSL.name("window_title"), SQLDataType.CLOB.nullable(false), this, "");

    private WindowActivity(Name alias, Table<WindowActivityRecord> aliased) {
        this(alias, aliased, null);
    }

    private WindowActivity(Name alias, Table<WindowActivityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /** Create an aliased <code>window_activity</code> table reference */
    public WindowActivity(String alias) {
        this(DSL.name(alias), WINDOW_ACTIVITY);
    }

    /** Create an aliased <code>window_activity</code> table reference */
    public WindowActivity(Name alias) {
        this(alias, WINDOW_ACTIVITY);
    }

    /** Create a <code>window_activity</code> table reference */
    public WindowActivity() {
        this(DSL.name("window_activity"), null);
    }

    public <O extends Record> WindowActivity(
            Table<O> child, ForeignKey<O, WindowActivityRecord> key) {
        super(child, key, WINDOW_ACTIVITY);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<WindowActivityRecord> getPrimaryKey() {
        return Keys.PK_WINDOW_ACTIVITY;
    }

    @Override
    public List<UniqueKey<WindowActivityRecord>> getKeys() {
        return Arrays.<UniqueKey<WindowActivityRecord>>asList(Keys.PK_WINDOW_ACTIVITY);
    }

    @Override
    public WindowActivity as(String alias) {
        return new WindowActivity(DSL.name(alias), this);
    }

    @Override
    public WindowActivity as(Name alias) {
        return new WindowActivity(alias, this);
    }

    /** Rename this table */
    @Override
    public WindowActivity rename(String name) {
        return new WindowActivity(DSL.name(name), null);
    }

    /** Rename this table */
    @Override
    public WindowActivity rename(Name name) {
        return new WindowActivity(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
