/*
 * This file is generated by jOOQ.
 */
package com.uptosmth.chronos.db.tables;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.uptosmth.chronos.db.DefaultSchema;
import com.uptosmth.chronos.db.Keys;
import com.uptosmth.chronos.db.tables.records.EditorActivityRecord;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class EditorActivity extends TableImpl<EditorActivityRecord> {

    private static final long serialVersionUID = 1L;

    /** The reference instance of <code>editor_activity</code> */
    public static final EditorActivity EDITOR_ACTIVITY = new EditorActivity();

    /** The class holding records for this type */
    @Override
    public Class<EditorActivityRecord> getRecordType() {
        return EditorActivityRecord.class;
    }

    /** The column <code>editor_activity.id</code>. */
    public final TableField<EditorActivityRecord, Integer> ID =
            createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /** The column <code>editor_activity.file</code>. */
    public final TableField<EditorActivityRecord, String> FILE =
            createField(DSL.name("file"), SQLDataType.CLOB.nullable(false), this, "");

    /** The column <code>editor_activity.project</code>. */
    public final TableField<EditorActivityRecord, String> PROJECT =
            createField(DSL.name("project"), SQLDataType.CLOB, this, "");

    /** The column <code>editor_activity.branch</code>. */
    public final TableField<EditorActivityRecord, String> BRANCH =
            createField(DSL.name("branch"), SQLDataType.CLOB, this, "");

    private EditorActivity(Name alias, Table<EditorActivityRecord> aliased) {
        this(alias, aliased, null);
    }

    private EditorActivity(Name alias, Table<EditorActivityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /** Create an aliased <code>editor_activity</code> table reference */
    public EditorActivity(String alias) {
        this(DSL.name(alias), EDITOR_ACTIVITY);
    }

    /** Create an aliased <code>editor_activity</code> table reference */
    public EditorActivity(Name alias) {
        this(alias, EDITOR_ACTIVITY);
    }

    /** Create a <code>editor_activity</code> table reference */
    public EditorActivity() {
        this(DSL.name("editor_activity"), null);
    }

    public <O extends Record> EditorActivity(
            Table<O> child, ForeignKey<O, EditorActivityRecord> key) {
        super(child, key, EDITOR_ACTIVITY);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<EditorActivityRecord> getPrimaryKey() {
        return Keys.PK_EDITOR_ACTIVITY;
    }

    @Override
    public List<UniqueKey<EditorActivityRecord>> getKeys() {
        return Arrays.<UniqueKey<EditorActivityRecord>>asList(Keys.PK_EDITOR_ACTIVITY);
    }

    @Override
    public EditorActivity as(String alias) {
        return new EditorActivity(DSL.name(alias), this);
    }

    @Override
    public EditorActivity as(Name alias) {
        return new EditorActivity(alias, this);
    }

    /** Rename this table */
    @Override
    public EditorActivity rename(String name) {
        return new EditorActivity(DSL.name(name), null);
    }

    /** Rename this table */
    @Override
    public EditorActivity rename(Name name) {
        return new EditorActivity(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
